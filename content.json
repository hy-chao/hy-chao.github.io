[{"title":"C_plus_plus学习","date":"2017-04-12T11:43:23.000Z","path":"2017/04/12/C-plus-plus学习/","text":"柔性数组 char data[0]或char data[] 称为柔性数组,只能放在结构体末尾。 作用: 方便管理内存缓冲区 减少内存碎片化 C++虚函数实现机制 虚函数的作用 简单的讲即实现多态。基类定义了虚函数，子类可以重写该函数，当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态地调用属于子类的该函数，且这样的函数调用是无法在编译器期间确认的，而是在运行时期确认，也叫作迟绑定。C++对象模型 这个模型从结合上面2中模型的特点，并对内存存取和空间进行了优化。在此模型中，non static 数据成员被放置到对象内部，static数据成员， static and nonstatic 函数成员均被放到对象之外。对于虚函 的支持则分两步完成： 每个class产生一堆指向虚函数的指针，放在表格之中。这个表格称之为虚函数表（virtual table，vtbl）。 每一个对象被添加了一个指针，指向相关的虚函数表vtbl。通常这个指针被称为vptr。vptr的设定（setting）和重置（resetting）都由每一个class的构造函数，析构函数和拷贝赋值运算符自动完成。 另外，虚函数表地址的前面设置了一个指向type_info的指针，RTTI（Run Time Type Identification）运行时类型识别是有编译器在编译器生成的特殊类型信息，包括对象继承关系，对象本身的描述，RTTI是为多态而生成的信息，所以只有具有虚函数的对象在会生成。 Const关键字的使用方法 学习地址 static关键字的使用方法 学习地址 extern关键字的使用方法 学习地址 运算符重载的规则 不可以引入新的运算符。除了. .* :: ?: 四个运算符，其他的运算符都可以被重载。 运算符的操作数目不可以改变。 运算符的优先级不可以改变。 运算符函数的参数列中，必须至少有一个参数为class型别。无法为诸如指针之类的non-class型别重新定义其原有的运算符，当然也无法为它引入新运算符。","tags":[]},{"title":"Hello World","date":"2017-04-02T12:42:02.584Z","path":"2017/04/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]